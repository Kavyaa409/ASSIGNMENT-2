# -*- coding: utf-8 -*-
"""Assignment 2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/18DDwL0-RUgxq0g7sTmVBZn3g8qEngt_u
"""

from re import X
#EXPLORATORY DATA ANALYSIS
#Part 1
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_absolute_error, mean_squared_error
from mpl_toolkits.mplot3d import Axes3D
dataframe=pd.read_csv('/content/extended_salary_data (1).csv')
print(dataframe)
#Part 2
plt.scatter(dataframe['YearsExperience'], dataframe['Salary'])
plt.xlabel("YearsExperience")
plt.ylabel("Salary (US$)")
plt.title("Scatter plot")
plt.show()
#Part 3
mean_YearsExperience=dataframe['YearsExperience'].mean()
median_YearsExperience=dataframe['YearsExperience'].median()
variance_YearsExperience=dataframe['YearsExperience'].var()
std_YearsExperience=dataframe['YearsExperience'].std()
print(mean_YearsExperience)
print(median_YearsExperience)
print(variance_YearsExperience)
print(std_YearsExperience)
mean_Salary=dataframe['Salary'].mean()
median_Salary=dataframe['Salary'].median()
variance_Salary=dataframe['Salary'].var()
std_Salary=dataframe['Salary'].std()
print(mean_Salary)
print(median_Salary)
print(variance_Salary)
print(std_Salary)

#LINEAR REGRESSION MODEL
#part 1
x=dataframe[['YearsExperience']]
y=dataframe['Salary']
x_train, x_test, y_train, y_test = train_test_split(x,y,test_size=0.2)
#part 2
Reg = LinearRegression()
Reg.fit(x_train, y_train)
#part 3
slope = Reg.coef_[0]
intercept = Reg.intercept_
print(f"Slope(Coefficient): {slope:.2f}")
print(f"Intercept: {intercept:.2f}")

#EVALUATION
#part 1
y_pred=Reg.predict(x_test)
#part 2
mae = mean_absolute_error(y_test, y_pred)
mse = mean_squared_error(y_test, y_pred)
print(f"Mean Absolute Error (MAE): {mae:.2f}")
print(f"Mean Squared Error (MSE): {mse:.2f}")
#part 3
plt.scatter(dataframe['YearsExperience'], dataframe['Salary'], color='blue', label='Observed Salaries')
X_full = np.linspace(dataframe[['YearsExperience']].min(), dataframe[['YearsExperience']].max(), 100)
y_line = Reg.predict(X_full)
plt.plot(X_full, y_line, color='red', label='Predicted Salary Trend')
plt.xlabel('Years of Experience')
plt.ylabel('Salary (US$)')
plt.title('Experience vs. Salary: Observed vs. Predicted')
plt.legend()
plt.show()



## BONUS TASK ##
#part 1
np.random.seed(42)
dataframe['NumProjectsCompleted'] = (dataframe['YearsExperience'] * 3 + np.random.normal(0, 2, len(dataframe)))
#part 2
x = dataframe[['YearsExperience', 'NumProjectsCompleted']]
y = dataframe['Salary']
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=42)
Multiplereg=LinearRegression()
Multiplereg.fit(x_train, y_train)
#part 3
y_pred_multiple = Multiplereg.predict(x_test)
mae_multiple = mean_absolute_error(y_test, y_pred_multiple)
mse_multiple = mean_squared_error(y_test, y_pred_multiple)
print("Multiple Linear Regression - Mean Absolute Error (MAE):", mae_multiple)
print("Multiple Linear Regression - Mean Squared Error (MSE):", mse_multiple)
#part 4
fig = plt.figure(figsize=(12, 8))
ax = fig.add_subplot(111, projection='3d')
ax.scatter(x_test['YearsExperience'], x_test['NumProjectsCompleted'], y_test, color='blue', label='Actual Salary', alpha=0.6)
ax.scatter(x_test['YearsExperience'], x_test['NumProjectsCompleted'], y_pred_multiple, color='red', label='Predicted Salary', alpha=0.6)
ax.set_xlabel('YearsExperience')
ax.set_ylabel('NumProjectsCompleted')
ax.set_zlabel('Salary')
ax.set_title('3D Scatter Plot: Actual vs Predicted Salary')
ax.legend()
plt.show()